// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id           String       @id @default(uuid())
  title        String
  instructions String       // Stored as text
  prepTime     String      @default("0")
  cookTime     String      @default("0")
  servings     String      @default("1")
  difficulty   String      @default("EASY")
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  ingredients  RecipeIngredient[]
  tags        RecipeTag[]
  categories  RecipeCategory[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
}

model Ingredient {
  id        String       @id @default(uuid())
  name      String      @unique
  recipes   RecipeIngredient[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  amount       String
  unit         String?
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([recipeId, ingredientId])
  @@index([recipeId])
  @@index([ingredientId])
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  recipes   RecipeTag[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model RecipeTag {
  recipeId  String
  tagId     String
  recipe    Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([recipeId, tagId])
  @@index([recipeId])
  @@index([tagId])
}

model Category {
  id        String           @id @default(uuid())
  name      String           @unique
  recipes   RecipeCategory[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model RecipeCategory {
  recipeId    String
  categoryId  String
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([recipeId, categoryId])
  @@index([recipeId])
  @@index([categoryId])
} 